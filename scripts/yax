#!/usr/bin/env python
import os

import click

from yax.state.jones import Indiana


def enable_debug(function):
    @click.option('--debug', is_flag=True)
    @click.pass_context
    def debuggable_function(ctx, debug=False, **kwargs):
        try:
            return function(**kwargs)
        except Exception as e:
            if debug:
                raise
            else:
                click.secho(str(e), err=True, fg="red", bold=True)
                ctx.exit(1)
    return debuggable_function


@click.group()
def cli():
    pass


@cli.command("inspect", help='View current study branches.')
def inspect():
    raise NotImplementedError("To be done.")


@cli.command("remove", help='Remove a study branch.')
def remove():
    raise NotImplementedError("To be done.")


@cli.command("init", help='Create a yax pipeline/config.')
@click.option('-p', '--pipeline', default=None)
@click.option('-r', '--run-key', default=None)
@enable_debug
def init(pipeline, run_key):
    if pipeline is None and run_key is None:
        raise ValueError("No arguments provided.")
    indiana = Indiana(os.getcwd(), pipeline=pipeline)
    if run_key is not None:
        indiana.init(run_key)


@cli.command("prep", help='Prepare a run.')
@click.option("-r", "--run-key", required=True)
@enable_debug
def prep(run_key):
    indiana = Indiana(os.getcwd())
    existing_key = indiana.prepare(run_key)
    if existing_key:
        click.echo("Matching run key found and re-prepared: %r." % existing_key)


@cli.command("engage", help='Start a run.')
@click.option('-r', '--run-key', required=True)
@enable_debug
def engage(run_key):
    indiana = Indiana(os.getcwd())
    indiana.engage(run_key)


if __name__ == "__main__":
    cli()
